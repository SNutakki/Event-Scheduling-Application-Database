{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Garamond;\f1\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\ri0\partightenfactor0

\f0\fs24 \cf0 /* -------------------- Queries -------------------- */
\f1 \
\

\f0 /* Primary author: Sashank Nutakki */
\f1 \

\f0 /* returns the names and usernames of everyone attending a particular event */
\f1 \

\f0 SELECT P.real_name, P.username
\f1 \

\f0 FROM Person P, Event E, Attending A
\f1 \

\f0 WHERE P.username = A.username
\f1 \

\f0 AND A.event_id = E.event_id
\f1 \

\f0 AND E.event_id = 'event1002';
\f1 \
\

\f0 /* Primary author: Sashank Nutakki */
\f1 \

\f0 /* returns the majors and number of students in each major who have taken or
\f1 \

\f0 are taking a particular course, where the number of students who have taken
\f1 \

\f0 the course in question exceeds 1 */
\f1 \

\f0 SELECT S.major, COUNT(DISTINCT S.student_id)
\f1 \

\f0 FROM Student S, CourseTaken CT, Course C
\f1 \

\f0 WHERE S.student_ID = CT.student_ID
\f1 \

\f0 AND CT.course_ID = C.course_ID
\f1 \

\f0 AND C.course_ID = 'course1001'
\f1 \

\f0 GROUP BY (S.major)
\f1 \

\f0 HAVING COUNT(S.student_id) > 1;
\f1 \
\

\f0 /* Primary author: Sashank Nutakki */
\f1 \

\f0 /* returns all first year undergraduates who are members within an organization */
\f1 \

\f0 SELECT O.username, O.email
\f1 \

\f0 FROM Student S, OrgMembers O
\f1 \

\f0 WHERE S.username = O.username
\f1 \

\f0 AND S.is_graduate_student IS 'FALSE'
\f1 \

\f0 AND S.current_year = 1;
\f1 \
\

\f0 /* Primary author: Bowen Jin */
\f1 \

\f0 /* returns all graduated students within majors currently having
\f1 \

\f0 fewer than 20 students */
\f1 \

\f0 SELECT GS.username, GS.major
\f1 \

\f0 FROM GraduatedStudents GS
\f1 \

\f0 GROUP BY GS.major
\f1 \

\f0 HAVING COUNT(GS.student_id) < 20;
\f1 \
\

\f0 /* Primary author: Sidhanth Panjwani */
\f1 \

\f0 /* returns all the personal events of a user */
\f1 \

\f0 SELECT Event.event_name, Event.description, Event.start_time, Event.end_time, Event.event_date
\f1 \

\f0 FROM Event NATURAL JOIN PersonalEvent NATURAL JOIN Attending
\f1 \

\f0 WHERE Attending.username = 'ben_user';
\f1 \
\
\
\

\f0 /* Primary author: David Liao */
\f1 \

\f0 /* returns all personal events of a user\'92s friend */
\f1 \

\f0 SELECT PE.event_id, E.event_name
\f1 \

\f0 FROM Event E, PersonalEvent PE, Friend F, Attending A
\f1 \

\f0 WHERE F.friend1 = 'amy_user'
\f1 \

\f0 AND F.friend2 = 'ben_user'
\f1 \

\f0 AND F.can_access_personal_sch IS 'TRUE'
\f1 \

\f0 AND PE.event_id = E.event_id
\f1 \

\f0 AND E.event_id = A.event_id
\f1 \

\f0 AND F.friend2 = A.username;
\f1 \
\

\f0 /* Primary author: Bowen Jin */
\f1 \

\f0 /* returns all members of a particular organization */
\f1 \

\f0 SELECT username, email
\f1 \

\f0 FROM OrgMembers
\f1 \

\f0 WHERE organization_name = 'DBMS appreciation club';
\f1 \
\

\f0 /* Primary author: Sid Panjwani */
\f1 \

\f0 /* returns the student IDs of all students who currently share at least one
\f1 \

\f0 class with a particular student*/
\f1 \

\f0 SELECT DISTINCT CT2.student_id
\f1 \

\f0 FROM CourseTaken CT1, CourseTaken CT2
\f1 \

\f0 WHERE CT1.student_id = 'dom_student1001'
\f1 \

\f0 AND CT1.student_id <> CT2.student_id
\f1 \

\f0 AND CT1.course_id = CT2.course_id
\f1 \

\f0 AND CT1.year = CT2.year
\f1 \

\f0 AND CT1.semester = CT2.semester
\f1 \

\f0 AND CT1.section = CT2.section
\f1 \

\f0 AND CT1.is_completed IS 'FALSE';
\f1 \
\

\f0 /* returns the course ID, course description, and number of students who have
\f1 \

\f0 taken or are currently enrolled in a particular course*/
\f1 \

\f0 /* Primary author: David Liao */
\f1 \
\

\f0 SELECT CT.course_id, C.description, COUNT(CT.student_id)
\f1 \

\f0 FROM Course C, CourseTaken CT, Student S
\f1 \

\f0 WHERE CT.student_id = S.student_id
\f1 \

\f0 AND C.course_id = CT.course_id
\f1 \

\f0 GROUP BY CT.course_id
\f1 \

\f0 HAVING COUNT(CT.student_ID) > 1;
\f1 \
\
\
\
\
\
\
\
\
\

\f0 /* students graduated per year ordered in descending order */
\f1 \

\f0 /* Primary Author: Sid Panjwani */
\f1 \
\

\f0 SELECT expected_date_of_graduation, count(*)
\f1 \

\f0 FROM Student
\f1 \

\f0 GROUP BY expected_date_of_graduation
\f1 \

\f0 ORDER BY expected_date_of_graduation DESC;
\f1 \
\

\f0 /* number of students per major in descending order */
\f1 \

\f0 /* Primary Author: Sid Panjwani */
\f1 \
\

\f0 SELECT major, count(*)
\f1 \

\f0 FROM Student
\f1 \

\f0 GROUP BY major
\f1 \

\f0 ORDER BY major DESC;
\f1 \
\

\f0 /* allows a particular student to see alumni who graduated with the same major with email & date graduated */
\f1 \

\f0 /*Primary Author: Sid Panjwani */
\f1 \
\

\f0 SELECT P.real_name, U.email, GS.expected_date_of_graduation as year_graduated
\f1 \

\f0 FROM Student S, GraduatedStudents GS, Person P, User U
\f1 \

\f0 WHERE S.student_id = 'ben_student1001' AND P.username = GS.username and U.username = P.username AND S.major = GS.major;
\f1 \
\

\f0 /* get all classes with more than 5 graduate students */
\f1 \

\f0 /* Primary Author: Sashank Nutakki */
\f1 \
\

\f0 SELECT C.course_ID, C.description, C.credit_hours, COUNT(S.student_id) as gradCount
\f1 \

\f0 FROM Course C, Student S, CourseTaken CT
\f1 \

\f0 WHERE S.is_graduate_student = 'TRUE' AND CT.course_id = C.course_id AND S.student_id = CT.student_id
\f1 \

\f0 GROUP BY C.course_id
\f1 \

\f0 HAVING gradCount >= 5;
\f1 \
\pard\pardeftab720\ri0\sa240\partightenfactor0
\cf0 \
\pard\pardeftab720\ri0\partightenfactor0

\f0 \cf0 /* get all friends of specific user attending a specific event */
\f1 \

\f0 /* Primary Author: Bowen Jin */
\f1 \
\

\f0 SELECT P2.real_name
\f1 \

\f0 FROM Friend F, Person P1, Person P2, Attending A1, Attending A2
\f1 \

\f0 WHERE P1.username = 'amy_user' AND F.friend1 = P1.username AND F.friend2 = P2.username AND A1.username = P1.username AND A2.username = P2.username AND A1.event_id = 'event1001' AND A1.event_id = A2.event_id;
\f1 \
\

\f0 /* get all organization events occurring on a specific date for organizations a specific user is registered for */
\f1 \

\f0 /* Primary Author: David Liao */
\f1 \
\

\f0 SELECT E.event_name, E.description, E.start_time, E.end_time
\f1 \

\f0 FROM Person P, OrganizationEvent OE, Event E
\f1 \

\f0 WHERE P.username = 'earl_user' AND E.event_date = '01/10/2020' AND OE.event_id = E.event_id;
\f1 \
\pard\pardeftab720\ri0\sa240\partightenfactor0
\cf0 \
\pard\pardeftab720\ri0\partightenfactor0

\f0 \cf0 /* get all classes with 5 or more students who have taken it */
\f1 \

\f0 /* Primary Author: Sid Panjwani */
\f1 \
\

\f0 SELECT C.course_id, C.description, COUNT(*)
\f1 \

\f0 FROM Course C, CourseTaken CT
\f1 \

\f0 WHERE C.course_id = CT.course_id
\f1 \

\f0 GROUP BY CT.course_id
\f1 \

\f0 HAVING COUNT(*) >= 5;
\f1 \
\

\f0 /* get all personal and organization events in a specific schedule of current user*/
\f1 \

\f0 /* Primary Author: Sid Panjwani */
\f1 \
\

\f0 SELECT P.event_id, O.event_id
\f1 \

\f0 FROM PersonalEvent P, OrganizationEvent O, Person P, Attending A
\f1 \

\f0 WHERE P.username = "amy_user" AND A.username = P.username AND A.event_id = P.event_id OR A.event_id = O.event_id;
\f1 \
\

\f0 /* get all personal events of a user\'92s friend */
\f1 \

\f0 /* Primary author: Bowen Jin*/
\f1 \
\

\f0 SELECT PersonalEvent.event_id
\f1 \

\f0 FROM Event,PersonalEvent,Friend
\f1 \

\f0 WHERE Friend.friend2 = 'amy_user'
\f1 \

\f0 AND Friend.friend1 = 'ben_user'
\f1 \

\f0 AND Friend.can_access_personal_sch = 'TRUE'
\f1 \

\f0 AND PersonalEvent.event_creator = Friend.friend1
\f1 \

\f0 AND PersonalEvent.event_id = Event.event_id;
\f1 \

\f0 /* returns the usernames, names, and departments of all currently enrolled students who are TAs */
\f1 \

\f0 /* Primary author: David Liao */
\f1 \
\
\
\
\
\
\
\
\

\f0 /* returns the usernames, names, and departments of all currently enrolled students who are TAs */
\f1 \

\f0 /* Primary author: David Liao */\
\pard\pardeftab720\ri0\partightenfactor0

\f1 \cf0 \
\pard\pardeftab720\ri0\partightenfactor0

\f0 \cf0 SELECT P.username, P.real_name, F.department
\f1 \

\f0 FROM Person P, Student S, Faculty F
\f1 \

\f0 WHERE P.username = S.username
\f1 \

\f0 AND S.username = F.username
\f1 \

\f0 AND S.has_graduated = 'FALSE'
\f1 \

\f0 ORDER BY ASC;
\f1 \
\

\f0 /* get all people that are invited to an event */
\f1 \

\f0 /*Primary author: David Liao */
\f1 \
\

\f0 SELECT Person.real_name
\f1 \

\f0 FROM Person NATURAL JOIN PersonalEventInvitation NATURAL JOIN PersonalEvent WHERE PersonalEvent.event_id = 'event1001';
\f1 \
\

\f0 /* deletes an event when the corresponding personal event is deleted */
\f1 \

\f0 /*Primary author: Sid Panjwani */
\f1 \
\

\f0 CREATE TRIGGER DeleteEvent \uc0\u8232 AFTER DELETE ON PersonalEvent\u8232 REFERENCING OLD AS DeletedEvent\u8232 BEGIN\u8232 DELETE FROM Event WHERE event_id = DeletedEvent.event_id;
\f1 \

\f0 END;
\f1 \
\

\f0 /* registers all currently enrolled graduate students as TAs within the department
\f1 \

\f0 having the same name as their major */
\f1 \

\f0 /* Primary author: David Liao*/
\f1 \
\

\f0 INSERT INTO Faculty(username, faculty_id, department)
\f1 \

\f0 SELECT S.username, S.student_id, S.major
\f1 \

\f0 FROM Student S
\f1 \

\f0 WHERE S.is_graduate_student IS 'TRUE'
\f1 \

\f0 AND S.has_graduated IS 'FALSE'
\f1 \
\

\f0 /* following these two delete statements, course with ID 'course1001' should be deleted
\f1 \

\f0 from table Course */
\f1 \

\f0 /* Primary author: David Liao */
\f1 \
\

\f0 DELETE FROM Student
\f1 \

\f0 WHERE student_id = 'earl_student1001'
\f1 \
\

\f0 DELETE FROM Student
\f1 \

\f0 WHERE student_id = 'faye_student1001'
\f1 \
\pard\pardeftab720\ri0\sa240\partightenfactor0
\cf0 \
\pard\pardeftab720\ri0\partightenfactor0

\f0 \cf0 /* insert an event to the persons events when they are invited */
\f1 \

\f0 /*Primary author: Bowen Jin*/
\f1 \

\f0 CREATE TRIGGER InvitedToEvent
\f1 \

\f0 AFTER INSERT ON
\f1 \

\f0 PersonalEventInvitation 
\f1 \

\f0 BEGIN
\f1 \

\f0 INSERT INTO PersonalEvent VALUES(InsertedInvitation.event_id, InsertedInvitation.username);
\f1 \

\f0 END;
\f1 \
\

\f0 /* If a student is deleted from Student, then if this was the only student associated
\f1 \

\f0 with a course from CourseTaken, then that course is deleted from CourseTaken */
\f1 \

\f0 /* Primary author: David Liao */
\f1 \
\

\f0 CREATE TRIGGER DeleteLastStudentOfCourseTaken
\f1 \

\f0 AFTER DELETE ON Student
\f1 \

\f0 WHEN (NOT EXISTS (SELECT *
\f1 \

\f0 FROM Student S
\f1 \

\f0 WHERE S.student_id = OLD.student_id))
\f1 \

\f0 BEGIN
\f1 \

\f0 DELETE FROM CourseTaken WHERE student_id = OLD.student_id;
\f1 \

\f0 END;
\f1 \
\

\f0 /* allows for deletions on OrgMembers
\f1 \

\f0 \'a0\'a0\'a0Primary Author: Sashank Nutakki
\f1 \

\f0 \'a0\'a0\'a0Secondary Author: Sid Panjwani */
\f1 \
\

\f0 CREATE TRIGGER DeleteOnOrgMembers
\f1 \

\f0 INSTEAD OF DELETE ON OrgMembers
\f1 \

\f0 BEGIN
\f1 \
\pard\pardeftab720\li720\ri0\partightenfactor0

\f0 \cf0 DELETE FROM Member 
\f1 \

\f0 WHERE member_username = Old.username AND organization_username = (SELECT username FROM Organization O where O.organization_name = Old.organization_name);
\f1 \
\pard\pardeftab720\ri0\partightenfactor0

\f0 \cf0 END;
\f1 \
\pard\pardeftab720\ri0\sa240\partightenfactor0
\cf0 \
\
\
\
\
\
\
\
\pard\pardeftab720\ri0\partightenfactor0

\f0 \cf0 /* --------------------DROP statements-------------------- */
\f1 \
\

\f0 DROP TABLE IF EXISTS Attending;
\f1 \

\f0 DROP TABLE IF EXISTS Course;
\f1 \

\f0 DROP TABLE IF EXISTS CourseEvent;
\f1 \

\f0 DROP TABLE IF EXISTS CourseTaken;
\f1 \

\f0 DROP TABLE IF EXISTS Event;
\f1 \

\f0 DROP TABLE IF EXISTS Faculty;
\f1 \

\f0 DROP TABLE IF EXISTS Friend;
\f1 \

\f0 DROP TABLE IF EXISTS Member;
\f1 \

\f0 DROP TABLE IF EXISTS Organization;
\f1 \

\f0 DROP TABLE IF EXISTS OrganizationEvent;
\f1 \

\f0 DROP TABLE IF EXISTS OrganizationEventInvitation;
\f1 \

\f0 DROP TABLE IF EXISTS Person;
\f1 \

\f0 DROP TABLE IF EXISTS PersonalEvent;
\f1 \

\f0 DROP TABLE IF EXISTS PersonalEventInvitation;
\f1 \

\f0 DROP TABLE IF EXISTS Student;
\f1 \

\f0 DROP TABLE IF EXISTS User;
\f1 \

\f0 DROP VIEW IF EXISTS OrgMembers;
\f1 \

\f0 DROP VIEW IF EXISTS GraduatedStudents;
\f1 \

\f0 DROP VIEW IF EXISTS ClassMembers;
\f1 \

\f0 DROP VIEW IF EXISTS AccessiblePersonalEvents;
\f1 \

\f0 DROP TRIGGER IF EXISTS DeleteLastStudentOfCourseTaken;
\f1 \

\f0 DROP TRIGGER IF EXISTS DeleteEvent;
\f1 \

\f0 DROP TRIGGER IF EXISTS InvitedToEvent;
\f1 \
\pard\pardeftab720\ri0\sl360\slmult1\sa160\partightenfactor0

\f0 \cf0 DROP TRIGGER IF EXISTS DeleteOnOrgMembers;
\f1 \
}